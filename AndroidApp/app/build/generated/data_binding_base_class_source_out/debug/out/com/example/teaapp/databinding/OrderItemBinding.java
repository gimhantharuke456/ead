// Generated by view binder compiler. Do not edit!
package com.example.teaapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.teaapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class OrderItemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final Button btnReview;

  @NonNull
  public final TextView itemName;

  @NonNull
  public final TextView orderDetails;

  @NonNull
  public final TextView orderId;

  @NonNull
  public final TextView orderStatus;

  @NonNull
  public final TextView shopName;

  private OrderItemBinding(@NonNull CardView rootView, @NonNull Button btnReview,
      @NonNull TextView itemName, @NonNull TextView orderDetails, @NonNull TextView orderId,
      @NonNull TextView orderStatus, @NonNull TextView shopName) {
    this.rootView = rootView;
    this.btnReview = btnReview;
    this.itemName = itemName;
    this.orderDetails = orderDetails;
    this.orderId = orderId;
    this.orderStatus = orderStatus;
    this.shopName = shopName;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static OrderItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static OrderItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.order_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static OrderItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnReview;
      Button btnReview = ViewBindings.findChildViewById(rootView, id);
      if (btnReview == null) {
        break missingId;
      }

      id = R.id.itemName;
      TextView itemName = ViewBindings.findChildViewById(rootView, id);
      if (itemName == null) {
        break missingId;
      }

      id = R.id.orderDetails;
      TextView orderDetails = ViewBindings.findChildViewById(rootView, id);
      if (orderDetails == null) {
        break missingId;
      }

      id = R.id.orderId;
      TextView orderId = ViewBindings.findChildViewById(rootView, id);
      if (orderId == null) {
        break missingId;
      }

      id = R.id.orderStatus;
      TextView orderStatus = ViewBindings.findChildViewById(rootView, id);
      if (orderStatus == null) {
        break missingId;
      }

      id = R.id.shopName;
      TextView shopName = ViewBindings.findChildViewById(rootView, id);
      if (shopName == null) {
        break missingId;
      }

      return new OrderItemBinding((CardView) rootView, btnReview, itemName, orderDetails, orderId,
          orderStatus, shopName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
